
本质是binder机制、共享内存地址、地址映射、

开启多进程需要用到android:process属性
AndroidManifest.xml中的activity、service、receiver和provider均支持android:process属性

为何要使用多进程
    - 分散内存的占用
    - 实现多模块
    - 子进程奔溃，主进程可以继续工作
    - 主进程退出，子进程可以继续工作
    - 实现守护进程

例：
   //这种设置形式表示该进程为当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中。
   <service android:name=".ProcessTestService" android:process=":secondProcess"/>
   //其他应用通过设置相同的ShareUID可以和它跑在同一个进程
   <service android:name=".LocalService" android:process="com.secondProcess"/>
全局进程允许两个不同的应用（或组件）运行在同一个进程中（使用ShareUID，且签名完全一致）；私有进程则不可以。

进程生命周期与优先级
重要性层次结构一共有 5 级。以下列表按照重要程度列出了各类进程（第一个进程最重要，将是最后一个被终止的
进程）：

1.前台进程：（foreground process）
    用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：
    托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）
    托管某个 Service，后者绑定到用户正在交互的 Activity
    托管正在“前台”运行的 Service（服务已调用 startForeground()）
    托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）
    托管正执行其 onReceive() 方法的 BroadcastReceiver
    通常，在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统
    才会终止它们。此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。

2.可见进程
    没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。如果一个进程满足以下任一条件，即视为可见进程：
    托管不在前台、但仍对用户可见的 Activity（已调用其 onPause() 方法）。例如，如果前台 Activity 启动
    了一个对话框，允许在其后显示上一 Activity，则有可能会发生这种情况。
    托管绑定到可见（或前台）Activity 的 Service。
    可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。

3.服务进程
    正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户
    所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。
    因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。

4.后台进程
    包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。这些进程对用户体验没有
    直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。通常会有很多后台进程在
    运行，因此它们会保存在 LRU（最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个
    被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生
    明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。有关保存和恢复状态的信息，
    请参阅 Activity文档。

5.空进程
不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。
为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。
根据进程中当前活动组件的重要程度，Android 会将进程评定为它可能达到的最高级别。例如，如果某进程托管
着服务和可见 Activity，则会将此进程评定为可见进程，而不是服务进程。

注：java特性，引用会让进程级别提高。即服务于另一进程的进程其级别永远不会低于其所服务的进程。

多进程问题汇总：

1、Application多次重建。
    代码：
    String processName = this.getProcessName();
       //判断进程名，保证只有主进程运行
       if (!TextUtils.isEmpty(processName) &&processName.equals(this.getPackageName())) {
           //在这里进行主进程初始化逻辑操作
           Log.i(">>>>>>","oncreate");
       }
    public static String getProcessName() {
        try {
            File file = new File("/proc/" + android.os.Process.myPid() + "/" + "cmdline");
            BufferedReader mBufferedReader = new BufferedReader(new FileReader(file));
            String processName = mBufferedReader.readLine().trim();
            mBufferedReader.close();
            return processName;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

2、静态成员变量和单例模式的失效、线程同步机制的完全失效
    设置了process属性后，产生了两个隔离的内存空间，一个内存空间里值的修改并不会影响到另外一个内存空间。

3、文件共享问题；SharedPreferences 可靠性下降在
    同时读写文件会出现问题